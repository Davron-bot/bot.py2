import os
import logging
import asyncio
import aiohttp
import io
import pytesseract
from PIL import Image, ImageEnhance
from langdetect import detect
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from dotenv import load_dotenv
import re
import random
import redis.asyncio as redis
from tenacity import retry, stop_after_attempt, wait_exponential

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv("bot.env")
API_TOKEN = os.getenv("API_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")
REDIS_PORT = int(os.getenv("REDIS_PORT", 6379))
DEFAULT_LANGUAGE = os.getenv("DEFAULT_LANGUAGE", 'ru')
TESSERACT_PATH = os.getenv("TESSERACT_PATH", r"C:\Program Files\Tesseract-OCR\tesseract.exe")

if not API_TOKEN:
    raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")
if not MISTRAL_API_KEY:
    raise ValueError("MISTRAL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env")

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows!)
pytesseract.pytesseract.tesseract_cmd = TESSERACT_PATH

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# Initialize Redis (for user profiles)
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=0)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
SOLUTION_PREFIX = "üí° **–≠–≤—Ä–∏–∫–∞! –†–µ—à–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:**\n\n"
ABOUT_TEXT = (
    "ü§ñ **–ü—Ä–∏–≤–µ—Ç, —è –ö–≤–∞–Ω—Ç–æ–≤—ã–π –ö–≤–µ—Å—Ç!**\n\n"
    "–Ø ‚Äî —Ç–≤–æ–π –≤–µ—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –≥–æ–ª–æ–≤–æ–ª–æ–º–æ–∫! üöÄ\n\n"
    "–ü—Ä–æ—Å—Ç–æ –±—Ä–æ—Å—å –º–Ω–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç! üîç\n\n"
    "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö? –ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É! üòâ"
)
SUPPORT_TEXT = (
    "üÜò **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–µ –±–µ–¥–∞!**\n\n"
    "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ–∏, –∫–∞–∫ —è –º–æ–≥—É —Å—Ç–∞—Ç—å –ª—É—á—à–µ, –ø–∏—à–∏ —Å—é–¥–∞: xcommander67@gmail.com.\n\n"
    "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! ‚ú®"
)
PHOTO_REQUEST_TEXT = "üì∏ –û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç! ü§ì"
ERROR_MESSAGE = "üöß –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ, –∏–ª–∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ —Ç–µ–∫—Å—Ç —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ! üßê"

# –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
GREETINGS = [
    "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∏—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π! üåü",
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–æ–π –¥—Ä—É–≥! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –æ—Ç–∫—Ä—ã—Ç–∏—è–º? üöÄ",
    "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –ø—Ä–∏–≤–µ–ª–æ —Ç–µ–±—è –≤ –º–æ–π –∫–≤–∞–Ω—Ç–æ–≤—ã–π –º–∏—Ä? ‚ú®",
    "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? üòâ"
]
PROCESSING_MESSAGES = [
    "‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Å–≤–æ–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã... –©–∞—Å –ø–æ–¥—É–º–∞–µ–º! üß†",
    "ü§î –•–º... –î–∞–π—Ç–µ-–∫–∞ –ø–æ–¥—É–º–∞—Ç—å... üí°",
    "üßê –°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —Ç—É—Ç —É –Ω–∞—Å... üîç",
    "‚öôÔ∏è –®–µ—Å—Ç–µ—Ä–µ–Ω–∫–∏ –∫—Ä—É—Ç—è—Ç—Å—è, –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç... ü§ñ"
]
OCR_ERROR_MESSAGES = [
    "üòû –£–≤—ã, –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ! –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? üñºÔ∏è",
    "üòï –ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å OCR... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ! üì∏",
    "üòî –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç... –ú–æ–∂–µ—Ç, –æ–Ω –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ –¥—Ä—É–≥–æ–º —è–∑—ã–∫–µ? üåê"
]
NO_TEXT_MESSAGES = [
    "ü§î –•–º... –ö–∞–∂–µ—Ç—Å—è, –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞! ü§∑‚Äç‚ôÇÔ∏è",
    "üßê –ù–µ –≤–∏–∂—É –∑–¥–µ—Å—å –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞... –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ? üñºÔ∏è",
    "üôÑ –ì–¥–µ –∂–µ —Ç–µ–∫—Å—Ç? –ú–æ–∂–µ—Ç, –æ–Ω —Å–ø—Ä—è—Ç–∞–ª—Å—è? üôà"
]
API_ERROR_MESSAGES = [
    "üîå –û–π-–æ–π! –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑! üò¨",
    "üö´ –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Å–µ—Ç—å—é... –°–µ–π—á–∞—Å –ø–æ—á–∏–Ω—é! üõ†Ô∏è",
    "üöß –ö–∞–∂–µ—Ç—Å—è, —Å–µ—Ä–≤–µ—Ä –Ω–µ–º–Ω–æ–≥–æ –∑–∞–Ω—è—Ç... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É! ‚è≥"
]
UNEXPECTED_ERROR_MESSAGES = [
    "üí• –ë–∞–±–∞—Ö! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É... –Ø —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å! üë®‚Äçüíª",
    "ü§Ø –û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å! –ù–æ —è —É–∂–µ –Ω–∞ –ø—É—Ç–∏ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é! üöÄ",
    "üòï –£–ø—Å! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, —è –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª—é! üòâ"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üñº –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ")],
        [KeyboardButton(text="‚ÑπÔ∏è –ö—Ç–æ —Ç—ã, –±–æ—Ç?"), KeyboardButton(text="üÜò SOS! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!"), KeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")]
    ], resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
)

def determine_subject(text):
    subject_keywords = {
        "—Ñ–∏–∑–∏–∫–∞": ["—Å–∏–ª–∞", "—Å–∫–æ—Ä–æ—Å—Ç—å", "—É—Å–∫–æ—Ä–µ–Ω–∏–µ", "—ç–Ω–µ—Ä–≥–∏—è", "–∑–∞–∫–æ–Ω"],
        "—Ö–∏–º–∏—è": ["–º–æ–ª–µ–∫—É–ª–∞", "–∞—Ç–æ–º", "—Ä–µ–∞–∫—Ü–∏—è", "–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å", "–º–æ–ª—è—Ä–Ω–∞—è"],
        "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞": ["—Ñ—É–Ω–∫—Ü–∏—è", "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "—Ç–µ–æ—Ä–µ–º–∞"]
    }
    text = text.lower()
    subject_counts = {}
    for subject, keywords in subject_keywords.items():
        count = 0
        for keyword in keywords:
            if keyword in text:
                count += 1
        subject_counts[subject] = count

    best_subject = max(subject_counts, key=subject_counts.get)
    return best_subject

def get_prompt(subject, task):
    if subject == "—Ñ–∏–∑–∏–∫–∞":
        instructions = f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ñ–∏–∑–∏–∫–∏. –ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∑–∞–∫–æ–Ω—ã —Ñ–∏–∑–∏–∫–∏.  {task}"
    elif subject == "—Ö–∏–º–∏—è":
        instructions = f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Ö–∏–º–∏–∏. –ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ —Ö–∏–º–∏—á–µ—Å–∫–∏–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è. {task}"
    elif subject == "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞":
        instructions = f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏. –ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–µ–º—ã. {task}"
    else:
        instructions = f"–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É. –û–±—ä—è—Å–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ —à–∞–≥–∞–º, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∑–Ω–∞–Ω–∏—è. {task}"
    return instructions

@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10))
async def solve_task_with_ai(task: str, input_language: str, user_style: str = "") -> str:
    """
    –†–µ—à–∞–µ—Ç –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é Mistral AI API –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π —Å—Ç–∏–ª—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    url = "https://api.mistral.ai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {MISTRAL_API_KEY}",
        "Content-Type": "application/json"
    }

    user_style = user_style[:200]

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–ø—Ä–∏–º–µ—Ä)
    subject = determine_subject(task) #–ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é

    if input_language != 'en':
        instructions = get_prompt(subject, task)
    else:
        instructions = get_prompt(subject, task)

    messages = [{"role": "user", "content": instructions}]

    data = {
        "model": "mistral-tiny",  # Use a smaller model
        "messages": messages,
        "temperature": 0.7
    }

    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Mistral AI. –Ø–∑—ã–∫: {input_language}, –ó–∞–¥–∞—á–∞: {task[:50]}...")

    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(url, json=data, headers=headers, timeout=30) as response:
                if response.status == 200:
                    try:
                        result = await response.json()
                        logging.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Mistral AI: {result}")
                        response_content = result["choices"][0]["message"]["content"].strip()
                        logging.info(f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞: {response_content[:100]}...")
                        return response_content
                    except (KeyError, TypeError, json.JSONDecodeError) as e:
                        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Mistral AI: {e}. –û—Ç–≤–µ—Ç: {result}")
                        raise  # re-raise to trigger retry
                else:
                    error_text = await response.text()
                    logging.error(f"–û—à–∏–±–∫–∞ Mistral AI API. –°—Ç–∞—Ç—É—Å: {response.status}, —Ç–µ–∫—Å—Ç: {error_text}, –ó–∞–¥–∞—á–∞: {task[:50]}")
                    raise Exception(f"Mistral AI API error: {response.status} - {error_text}")  # Raise for retry

        except aiohttp.ClientError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Mistral AI: {e}")
            raise  # re-raise to trigger retry
        except asyncio.TimeoutError:
            logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Mistral AI.")
            raise  # re-raise to trigger retry

def analyze_user_style(text: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Mistral AI."""
    emoji_pattern = re.compile(r"["u"\U0001F600-\U0001F64F"u"\U0001F300-\U0001F5FF"u"\U0001F680-\U0001F6FF"u"\U0001F1E0-\U0001F1FF"u"\U00002702-\U000027B0"u"\U000024C2-\U0001F251""]+", flags=re.UNICODE)
    emojis = emoji_pattern.findall(text)
    num_emojis = len(emojis)
    num_exclamations = text.count("!")
    sentences = re.split(r"[.!?]+", text)
    num_sentences = len(sentences)
    total_words = sum(len(s.split()) for s in sentences)
    avg_sentence_length = total_words / num_sentences if num_sentences > 0 else 0

    style_instructions = ""

    if num_emojis > 2:
        style_instructions += "–ò—Å–ø–æ–ª—å–∑—É–π –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏. "
    elif num_emojis > 0:
        style_instructions += "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Ä–µ–Ω–Ω–æ. "

    if num_exclamations > 3:
        style_instructions += "–ë—É–¥—å –æ—á–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º. "
    elif num_exclamations > 1:
        style_instructions += "–ë—É–¥—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º. "

    if avg_sentence_length < 5:
        style_instructions += "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
    elif avg_sentence_length > 15:
        style_instructions += "–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "

    if not style_instructions:
        style_instructions += "–û–±—â–∞–π—Å—è –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. "

    return f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, —á—Ç–æ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. {style_instructions}"

async def get_user_profile(user_id: int) -> dict | None:
    try:
        key = f"user:{user_id}"
        profile = await redis_client.hgetall(key)
        if profile:
            return {k.decode(): v.decode() for k, v in profile.items()}
        return None
    except redis.exceptions.ConnectionError as e:
        logging.error(f"Redis connection error: {e}")
        return None  # Or handle the error appropriately

async def set_user_profile(user_id: int, name: str, language: str, style: str):
    try:
        key = f"user:{user_id}"
        await redis_client.hset(key, mapping={"name": name, "language": language, "style": style})
        await redis_client.expire(key, 3600 * 24)
    except redis.exceptions.ConnectionError as e:
        logging.error(f"Redis connection error: {e}")
        # Handle the error appropriately (e.g., retry, log, inform the user)

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_profile = await get_user_profile(user_id)

    if user_profile:
        await message.answer(
            f"{random.choice(GREETINGS)}\n–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è, {user_profile['name']}! üòâ",
            reply_markup=kb
        )
    else:
        await message.answer(
            "üåü –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∏—Å–∫–∞—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π! üåü\n\n"
            "–Ø ‚Äî –ö–≤–∞–Ω—Ç–æ–≤—ã–π –ö–≤–µ—Å—Ç, –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∞–º—ã–µ —Å–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! üìö\n\n"
            "–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? ‚ú®",
            reply_markup=ReplyKeyboardRemove()
        )
        await dp.register_message_handler(get_name, F.text, ~Command("start"))

async def get_name(message: types.Message):
    name = message.text.strip()
    user_style = analyze_user_style(message.text)
    user_id = message.from_user.id

    await set_user_profile(user_id=user_id, name=name, language=DEFAULT_LANGUAGE, style=user_style)

    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? üòâ",
        reply_markup=kb
    )

@dp.message(F.text == "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫")
async def language_button_handler(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (en, ru):", reply_markup=ReplyKeyboardRemove())
    await dp.register_message_handler(set_language, F.text)

async def set_language(message: types.Message):
    language = message.text.strip().lower()
    if language in ["en", "ru"]:
        user_id = message.from_user.id
        user_profile = await get_user_profile(user_id)
        if user_profile:
            await set_user_profile(user_id=user_id, name=user_profile['name'], language=language, style=user_profile['style'])
            await message.answer(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {language}!", reply_markup=kb)
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=kb)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —è–∑—ã–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 'en' –∏–ª–∏ 'ru'.", reply_markup=kb)

@dp.message(F.text == "üñº –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ")
async def photo_button_handler(message: types.Message):
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–≥–æ!",
                         reply_markup=ReplyKeyboardRemove())

@dp.message(F.text == "‚ÑπÔ∏è –ö—Ç–æ —Ç—ã, –±–æ—Ç?")
async def about_button_handler(message: types.Message):
    await message.answer(ABOUT_TEXT, reply_markup=kb)

@dp.message(F.text == "üÜò SOS! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!")
async def support_button_handler(message: types.Message):
    await message.answer(SUPPORT_TEXT, reply_markup=kb)

# Image preprocessing
def preprocess_image(image: Image.Image) -> Image.Image:
    """
    Preprocesses the image to improve OCR accuracy.
    """
    # Convert to grayscale
    image = image.convert("L")

    # Enhance contrast
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2.0)

    # Further steps can be added: sharpening, noise reduction, etc.

    return image

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (OCR)
@dp.message(F.photo)
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    user_profile = await get_user_profile(user_id)
    user_style = ""
    language = DEFAULT_LANGUAGE # default language

    if user_profile:
        user_style = user_profile.get("style", "") # Use .get() for safety
        language = user_profile.get("language", DEFAULT_LANGUAGE)

    if message.caption:
        user_style = analyze_user_style(message.caption)
    else:
        logging.info("No caption found in the photo. Using default style.")

    await message.answer(random.choice(PROCESSING_MESSAGES))

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.telegram.org/file/bot{API_TOKEN}/{file_path}") as resp:
                if resp.status == 200:
                    image_bytes = await resp.read()
                    image = Image.open(io.BytesIO(image_bytes))

                    # Preprocess the image
                    image = preprocess_image(image)

                    try:
                        extracted_text = pytesseract.image_to_string(image, lang=f"{language}+eng").strip()
                    except Exception as ocr_error:
                        logging.error(f"OCR error: {ocr_error}")
                        await message.answer(random.choice(OCR_ERROR_MESSAGES), reply_markup=kb)
                        return

                    if extracted_text:
                        # Removed redundant language detection
                        solution = await solve_task_with_ai(extracted_text, language, user_style)
                        await message.answer(solution, reply_markup=kb)
                    else:
                        await message.answer(random.choice(NO_TEXT_MESSAGES), reply_markup=kb)
                else:
                    await message.answer(random.choice(API_ERROR_MESSAGES), reply_markup=kb)
    except aiohttp.ClientError as e:
        logging.error(f"AIOHTTP error: {e}")
        await message.answer(random.choice(API_ERROR_MESSAGES), reply_markup=kb)
    except Exception as e:
        logging.exception(f"Unexpected error: {e}")
        await message.answer(random.choice(UNEXPECTED_ERROR_MESSAGES), reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á)
@dp.message(F.text)
async def solve_task_handler(message: types.Message):
     if message.text in {"üñº –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ç–æ", "‚ÑπÔ∏è –ö—Ç–æ —Ç—ã, –±–æ—Ç?", "üÜò SOS! –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å!", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"}:
         return
     if message.text == "/start":
         return
     task = message.text.strip()
     user_id = message.from_user.id
     user_profile = await get_user_profile(user_id)
     user_style = ""
     language = DEFAULT_LANGUAGE

     if user_profile:
         user_style = user_profile.get("style", "")
         language = user_profile.get("language", DEFAULT_LANGUAGE)

     if not task:
         await message.answer("‚úçÔ∏è –≠–π! –ê –≥–¥–µ –∂–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏? –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üòâ")
         return

     await message.answer(random.choice(PROCESSING_MESSAGES))

     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–ø—Ä–∏–º–µ—Ä)
     subject = determine_subject(task)  # –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é

     #–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
     instructions = get_prompt(subject, task)

     solution = await solve_task_with_ai(task, language, user_style)
     await message.answer(solution, reply_markup=kb)

@dp.message(F.video)
async def handle_video(message: types.Message):
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é! üì∏")

async def main():
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logging.exception("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –æ—à–∏–±–∫–æ–π!")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())